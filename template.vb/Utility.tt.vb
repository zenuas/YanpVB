<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Yanp.Extensions" #>
<#
Dim vb_reserved_word = {
		"AddHandler",
		"AddressOf",
		"Aggregate",
		"Alias",
		"And",
		"AndAlso",
		"Ansi",
		"As",
		"Assembly",
		"Async",
		"Auto",
		"Await",
		"Binary",
		"Boolean",
		"By",
		"ByRef",
		"ByVal",
		"Byte",
		"CBool",
		"CByte",
		"CChar",
		"CDate",
		"CDbl",
		"CDec",
		"CInt",
		"CLng",
		"CObj",
		"CSByte",
		"CShort",
		"CSng",
		"CStr",
		"CType",
		"CUInt",
		"CULng",
		"CUShort",
		"Call",
		"Case",
		"Catch",
		"Char",
		"Class",
		"Compare",
		"Const",
		"Continue",
		"Custom",
		"Date",
		"Decimal",
		"Declare",
		"Default",
		"Delegate",
		"Dim",
		"DirectCast",
		"Distinct",
		"Do",
		"Double",
		"Each",
		"Else",
		"ElseIf",
		"End",
		"EndIf",
		"Enum",
		"Equals",
		"Erase",
		"Error",
		"Event",
		"Exit",
		"Explicit",
		"ExternalSource",
		"False",
		"Finally",
		"For",
		"Friend",
		"From",
		"Function",
		"Get",
		"GetType",
		"GetXMLNamespace",
		"Global",
		"GoSub",
		"GoTo",
		"Group",
		"Handles",
		"If",
		"Implements",
		"Imports",
		"In",
		"Inherits",
		"Integer",
		"Interface",
		"Into",
		"Is",
		"IsFalse",
		"IsNot",
		"IsTrue",
		"Iterator",
		"Join",
		"Key",
		"Let",
		"Lib",
		"Like",
		"Long",
		"Loop",
		"Me",
		"Mid",
		"Mod",
		"Module",
		"MustInherit",
		"MustOverride",
		"MyBase",
		"MyClass",
		"Namespace",
		"Narrowing",
		"New",
		"Next",
		"Not",
		"NotInheritable",
		"NotOverridable",
		"Nothing",
		"Object",
		"Of",
		"Off",
		"On",
		"Operator",
		"Option",
		"Optional",
		"Or",
		"OrElse",
		"Order",
		"Out",
		"Overloads",
		"Overridable",
		"Overrides",
		"ParamArray",
		"Partial",
		"Preserve",
		"Private",
		"Property",
		"Protected",
		"Public",
		"REM",
		"RaiseEvent",
		"ReDim",
		"ReadOnly",
		"Region",
		"RemoveHandler",
		"Resume",
		"Return",
		"SByte",
		"Select",
		"Set",
		"Shadows",
		"Shared",
		"Short",
		"Single",
		"Skip",
		"Static",
		"Step",
		"Stop",
		"Strict",
		"String",
		"Structure",
		"Sub",
		"SyncLock",
		"Take",
		"Text",
		"Then",
		"Throw",
		"To",
		"True",
		"Try",
		"TryCast",
		"TypeOf",
		"UInteger",
		"ULong",
		"UShort",
		"Unicode",
		"Until",
		"Using",
		"Variant",
		"Wend",
		"When",
		"Where",
		"While",
		"Widening",
		"With",
		"WithEvents",
		"WriteOnly",
		"Xor",
		"Yield"
	}.Map(Function (x) x.ToUpper()).ToHash_ValueDerivation(Function (x) True)

Dim used_term As New Dictionary(Of String, Integer)
Dim sorted_terms As List(Of String) = Syntax.Declas.Keys.SortToList(
	Function(a, b)
		
		Dim ax = Syntax.Declas(a)
		Dim bx = Syntax.Declas(b)
		
		If ax.IsTerminalSymbol AndAlso Not bx.IsTerminalSymbol Then Return -1
		If Not ax.IsTerminalSymbol AndAlso bx.IsTerminalSymbol Then Return 1

		If a.StartsWith("$") AndAlso Not b.StartsWith("$") Then Return 1
		If Not a.StartsWith("$") AndAlso b.StartsWith("$") Then Return -1

		Return String.Compare(a, b)
	End Function)
Dim terms = sorted_terms.ToHash_ValueDerivation(Function(x, i) i)
Dim vbterms = sorted_terms.ToHash_ValueDerivation(
	Function(x)
		
		x = Regex.Replace(x, "^'|'$", "")
		x = Regex.Replace(x, "\$(?=[a-zA-Z])", "_")
		x = Regex.Replace(x, "[^_0-9a-zA-Z]", Function (c) "__x" + Convert.ToInt32(c.Value.Chars(0)).ToString("X2"))
		
		Dim xupper = x.ToUpper()
		
		If used_term.ContainsKey(xupper) Then
			
			used_term(xupper) += 1
			Return String.Format("{0}_{1}", x, used_term(xupper))
		End If
		
		used_term(xupper) = 0
		Return If(vb_reserved_word.ContainsKey(xupper), String.Format("[{0}]", x), x)
	End Function)
#>
