<#@ template language="VB" debug="true" hostSpecific="true" #>
<#@ output extension=".vb" encoding="UTF-8" #>
<#@ assembly name="yanp.exe" #>
<#@ include file="Utility.tt.vb" #>
<#@ parameter type="Yanp.Syntax" name="Syntax" #>
<#= Syntax.HeaderCode #>
Imports System

Namespace <#= Syntax.GetDefine("YYNAMESPACE", "Parser") #>

    <Serializable()> _
    Public Class Token
        Implements IToken(Of <#= Syntax.Default #>)

        Public Sub New(type As SymbolTypes)

            Me.Type = type
        End Sub

        Public Sub New(type As SymbolTypes, name As String)
            Me.New(type)

            If Me.Type = SymbolTypes.<#= vbterms("$END") #> AndAlso Not name.Equals("") Then Throw New ArgumentException("eof with blank", "name")

            Me.Name = name
        End Sub

        Protected Overridable ReadOnly Property InputToken() As Integer Implements IToken(Of <#= Syntax.Default #>).InputToken
        Protected Overridable Property TableIndex As Integer Implements IToken(Of <#= Syntax.Default #>).TableIndex
        Public Overridable Property Value As <#= Syntax.Default #> Implements IToken(Of <#= Syntax.Default #>).Value
        Public Overridable ReadOnly Property Name As String
        Public Overridable ReadOnly Property Type As SymbolTypes

        Public Overridable ReadOnly Property EndOfToken As Boolean Implements IToken(Of <#= Syntax.Default #>).EndOfToken
            Get
                Return (Me.Type = SymbolTypes.<#= vbterms("$END") #>)
            End Get
        End Property

        Public Overridable ReadOnly Property IsAccept As Boolean Implements IToken(Of <#= Syntax.Default #>).IsAccept
            Get
                Return Me.EndOfToken
            End Get
        End Property

        Public Overridable Property LineNumber As Nullable(Of Integer)
        Public Overridable Property LineColumn As Nullable(Of Integer)
    End Class

End Namespace
