<#@ template language="VB" debug="true" hostSpecific="true" #>
<#@ output extension=".vb" encoding="UTF-8" #>
<#@ assembly name="yanp.exe" #>
<#@ include file="Utility.tt.vb" #>
<#@ import namespace="Yanp" #>
<#@ parameter type="Yanp.Syntax" name="Syntax" #>
<#@ parameter type="System.Collections.Generic.List(Of Yanp.Node)" name="Nodes" #>
<#@ parameter type="System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of String, Yanp.ParserAction))" name="ParserTable" #>
<#= Syntax.HeaderCode #>
Imports System
Imports System.Diagnostics

Namespace <#= Syntax.GetDefine("YYNAMESPACE", "Parser") #>

    Public Class MyParser
        Inherits Parser(Of <#= Syntax.Default #>)

        Private Shared ReadOnly tables_(,) As Integer = {
<#
Dim node_to_index = Me.Nodes.ToHash_ValueDerivation(Function(x, i) i)
Dim reduce_to_index = Me.Syntax.Grammars.ToHash_ValueDerivation(Function(x, i) -i - 1)
Dim count = Me.ParserTable.Count
terms.Remove("$ACCEPT")
For Each p As Dictionary(Of String, ParserAction) In Me.ParserTable
	
	count = count - 1
	Dim line(terms.Keys.Count - 1) As Integer
	For Each action As KeyValuePair(Of String, ParserAction) In p
		
		line(terms(action.Key)) = If(TypeOf action.Value Is ShiftAction,
				node_to_index(CType(action.Value, ShiftAction).Next),
				reduce_to_index(CType(action.Value, ReduceAction).Reduce)
			)
	Next
#>                {<#= String.Join(", ", line) #>}<#= If(count > 0, ",", "") #>
<#
Next
#>
            }

        Protected Overrides Function CreateTable() As Integer(,)

            Return tables_
        End Function

        Protected Overrides Function RunAction(yy_no As Integer) As IToken(Of <#= Syntax.Default #>)

            Dim yy_token As IToken(Of <#= Syntax.Default #>) = Nothing
            Dim yy_value As <#= Syntax.Default #> = Nothing

            Select Case yy_no
<#
Dim grams = Me.Syntax.Grammars.Map(Function(x) x.Name).SortToList.Unique.ToHash_ValueDerivation(Function(x, i) i)
For Each reduce As GrammarLine In Me.Syntax.Grammars
	
	Dim action As String
	Dim length = reduce.Grams.Count
	If reduce.HasAction Then
		
		action = reduce.Action
		action = Regex.Replace(action, "\$\$", "yy_value")
		action = Regex.Replace(action, "\$(\d+)",
			Function(m)
				
				Dim n = CInt(m.Groups(1).Value)
				If n <= 0 OrElse n > length Then Return "Nothing"
				n = n - 1
				Dim g = reduce.Grams(n)
				If g.Type <> "" Then Return String.Format("CType(Me.GetValue({0}), {1})", n - length, g.Type)
				If Not grams.ContainsKey(g.Name) Then Return String.Format("CType(Me.GetToken({0}), Token)", n - length)
				Return String.Format("(Me.GetValue({0}))", n - length)
			End Function)
	Else
		action = String.Format("yy_value = Me.DefaultAction({0})", length)
	End If
#>
                Case <#= reduce_to_index(reduce) #>
                    Debug.WriteLine("<#= reduce #>")
                    <#= action #>
                    yy_token = Me.DoAction(SymbolTypes.<#= vbterms(reduce.Name) #>, <#= length #>, yy_value)

<#
Next
#>
                Case Else
                    Throw New InvalidProgramException
            End Select

            Return yy_token
        End Function

        Protected Overridable Overloads Function DoAction(
                type As SymbolTypes,
                length As Integer,
                value As <#= Syntax.Default #>
            ) As IToken(Of <#= Syntax.Default #>)

            Return Me.DoAction(New Token(type), length, value)
        End Function

        Protected Overrides Sub OnError(lex As Lexer(Of <#= Syntax.Default #>))

            Debug.Fail("syntax error")
            Throw New SyntaxErrorException(lex.LineNumber, lex.LineColumn, "syntax error")
        End Sub
    End Class

End Namespace

